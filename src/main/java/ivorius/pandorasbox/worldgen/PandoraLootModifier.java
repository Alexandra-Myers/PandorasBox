package ivorius.pandorasbox.worldgen;




import com.google.common.base.Suppliers;

import com.google.gson.JsonObject;
import com.mojang.serialization.Codec;

import com.mojang.serialization.codecs.RecordCodecBuilder;

import net.minecraft.item.Item;
import net.minecraft.item.ItemStack;
import net.minecraft.loot.LootContext;
import net.minecraft.loot.conditions.ILootCondition;
import net.minecraft.util.JSONUtils;
import net.minecraft.util.ResourceLocation;
import net.minecraftforge.common.loot.GlobalLootModifierSerializer;
import net.minecraftforge.common.loot.IGlobalLootModifier;

import net.minecraftforge.common.loot.LootModifier;

import net.minecraftforge.registries.ForgeRegistries;


import javax.annotation.Nonnull;
import java.util.List;
import java.util.Random;

import java.util.function.Supplier;




public class PandoraLootModifier extends LootModifier {

  protected final int chance;

  protected final Item item;

  public PandoraLootModifier(ILootCondition[] conditionsIn, int chance, Item item) {

    super(conditionsIn);

    this.chance = chance;

    this.item = item;

  }

  public List<ItemStack> maybeInject(List<ItemStack> generatedLoot, int chance) {
    if(new Random().nextInt(100) <= chance) {
      generatedLoot.add(item.getDefaultInstance());
    }
    return generatedLoot;
  }

  /**
   * Applies the modifier to the generated loot (all loot conditions have already been checked
   * and have returned true).
   *
   * @param generatedLoot the list of ItemStacks that will be dropped, generated by loot tables
   * @param context       the LootContext, identical to what is passed to loot tables
   * @return modified loot drops
   */
  @Nonnull
  @Override
  protected List<ItemStack> doApply(List<ItemStack> generatedLoot, LootContext context) {

    generatedLoot = maybeInject(generatedLoot, chance);

    return generatedLoot;
  }
  public static class Serializer extends GlobalLootModifierSerializer<PandoraLootModifier> {

    @Override
    public PandoraLootModifier read(ResourceLocation name, JsonObject object, ILootCondition[] conditionsIn) {
      int chance = JSONUtils.getAsInt(object, "chance");
      Item item = ForgeRegistries.ITEMS.getValue(new ResourceLocation((JSONUtils.getAsString(object, "item"))));
      return new PandoraLootModifier(conditionsIn, chance, item);
    }

    @Override
    public JsonObject write(PandoraLootModifier instance) {
      JsonObject json = makeConditions(instance.conditions);
      json.addProperty("chance", instance.chance);
      json.addProperty("item", ForgeRegistries.ITEMS.getKey(instance.item).toString());
      return json;
    }
  }
}